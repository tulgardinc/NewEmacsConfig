#+title:Emacs Config
#+PROPERTY: header-args :tangle config.el :results none

* Things to do
  I might also consider changing the theme
*** TODO Look into Fixed pitch bullets
   
* Plugins to look into
  - Zoom
  - Dirvish maybe in the future if dired is not good enough
  - Org roam
  - Org modern
  - Ivy

* Set garbage collector to a relaxed value
  this speeds up init time.
  it is set back to the original value at the end.

  #+begin_src emacs-lisp :tangle yes
    (setq gc-cons-threshold 10000000000)
  #+end_src

* Compile Elisp binaries JIT
  #+begin_src emacs-lisp :tangle yes
    (setq comp-deferred-compilation t)
  #+end_src

* Cleanup the UI and Emacs weirdness
  make visuals make sense and sound

  #+begin_src elisp
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (setq inhibit-startup-screen t)
    (setq initial-scratch-message nil)
    (setq ring-bell-function 'ignore)

    					; background
    (set-frame-parameter nil 'alpha-background 60)
    (add-to-list 'default-frame-alist '(alpha-background . 60))

    					; make warnings buffer only appear if there is an error
    (setq warning-minimum-level :error)

    					; set line numbers
    (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode) (setq display-line-numbers 'relative)))
  #+end_src

  make backups go to the current directory

  #+begin_src elisp
    (setq backup-directory-alist `(("." . "~/.emacs.d/emacs_saves")))
    (setq backup-by-copying t)
  #+end_src

* Setup Straight
  #+begin_src elisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 6))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
    	(url-retrieve-synchronously
    	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
    	 'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    (setq package-enable-at-startup nil)

  #+end_src

* Get use-package
  #+begin_src elisp
    (straight-use-package 'use-package)
  #+end_src

* Evil Mode
  #+begin_src elisp
    (use-package evil
      :straight t
      :init
      (setq evil-want-C-u-scroll t)
      (setq evil-want-keybinding nil)
      (setq evil-want-integration t)
    					;(setq evil-overriding-maps nil)
      :config
      (evil-mode)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (evil-set-undo-system 'undo-tree)
    					; Keybinds
      )
  #+end_src

  and evil collection for many other modes

  #+begin_src elisp
    (use-package evil-collection
      :straight t
      :after evil
      :custom (evil-collection-setup-minibuffer t)
      :config
      (evil-collection-init)
      )
  #+end_src

  evil surround

  #+begin_src emacs-lisp :tangle yes
    (use-package evil-surround
      :straight t 
      :after evil
      :config
      (global-evil-surround-mode))
  #+end_src

* Org mode
  *might need to switch back to org indent mode*
  if I ever want to use variable pitch fonts in org
  
  #+begin_src elisp
    (use-package org
      :straight t
      :defer t
      :after evil
      :config
    					;indents and bullets
      (setq org-confirm-babel-evaluate nil)
      (setq org-adapt-indentation t
          	org-hide-leading-stars nil
          	org-odd-levels-only t)
      (setq org-hide-emphasis-markers t)
    					;pretty title
      (set-face-attribute 'org-document-title nil :height 250)  
      (set-face-attribute 'org-document-info-keyword nil :height 1)
        					; keybinds
      (evil-define-key 'normal org-mode-map (kbd "C-t") 'org-todo)
      )
  #+end_src

  org superstar for bullets

  #+begin_src emacs-lisp :tangle yes
    (use-package org-superstar
      :straight t
      :defer t
      :hook (org-mode . org-superstar-mode)
      :config (setq org-superstar-leading-bullet ?\s)
      )
  #+end_src

* Undo tree
  #+begin_src emacs-lisp :tangle yes
    (use-package undo-tree
      :straight t
      :config
      (global-undo-tree-mode)
      (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo_tree_files")))
      )
  #+end_src

* Doom Themes
  #+begin_src elisp
    (use-package doom-themes
      :straight t
      :config
      (load-theme 'doom-moonlight t)
    					;(setq doom-themes-treemacs-theme "moonlight")
    					;(doom-themes-treemacs-config)
      (define-key evil-normal-state-map (kbd "C-f") 'treemacs)
      (doom-themes-org-config)
      )
  #+end_src

* Doom modeline
  #+begin_src elisp
    (use-package doom-modeline
      :straight t
      :config
      (doom-modeline-mode)
      (display-time)
      (display-battery-mode)
      (setq doom-modeline-battery t)
      (setq doom-modeline-time t)
      )
  #+end_src

* Set font
  #+begin_src emacs-lisp :tangle yes
    (set-face-attribute 'default nil :family "JetBrainsMono Nerd Font" :height 110)
    					;(set-face-attribute 'default nil :family "Ubuntu mono" :height 120)
  #+end_src

* All the icons
  #+begin_src elisp
    (use-package all-the-icons
      :straight t)
  #+end_src

* Setup Solaire
  Make unimportant buffers darker
  #+begin_src elisp
    (use-package solaire-mode
      :straight t
      :config
      (solaire-global-mode t)
      (push '(treemacs-window-background-face . solaire-default-face) solaire-mode-remap-alist)
      (push '(treemacs-hl-line-face . solaire-hl-line-face) solaire-mode-remap-alist)
      )
  #+end_src

* Lsp-mode
  #+begin_src elisp
    (use-package lsp-mode
      :straight t
      :defer t
      :config
      (setq lsp-inlay-hint-enable t)
      (setq lsp-rust-analyzer-inlay-hints-mode t)
      (setq lsp-rust-analyzer-server-display-hints t)
      (setq lsp-rust-analyzer-display-chaining-hints t)
      (setq lsp-rust-analyzer-display-parameter-hints t)
      )

    (use-package lsp-ui
      :straight t
      :after lsp-mode)
  #+end_src

* Flymake
  linter
  #+begin_src emacs-lisp :tangle yes
    (use-package flymake
      :straight t
      :hook (emacs-lisp-mode . flymake-mode))
  #+end_src

* Helm
  #+begin_src elisp
    (use-package helm
      :straight t
      :after evil
      :config
      (helm-mode)
      (setq helm-split-window-in-side-p t)
      (evil-define-key 'normal 'global
        (kbd "M-x") 'helm-M-x
        (kbd "C-b") 'helm-mini
        (kbd "C-x C-f") 'helm-find-files)
      (evil-define-key nil helm-map
        (kbd "<tab>")  'helm-execute-persistent-action
        (kbd "<C-backspace>")  'backward-kill-word
        (kbd "<escape>")  'helm-keyboard-quit)
      )
  #+end_src

  Make helm appear in the bottom

  #+begin_src emacs-lisp :tangle yes
    (use-package shackle
      :straight t
      :config
      (shackle-mode)
      (setq shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :ratio 0.4)))
      )
  #+end_src

  helm for LSP
  #+begin_src elisp
    (use-package helm-lsp
      :defer t
      :straight t)
  #+end_src

  Ripgrep with helm
  #+begin_src elisp
    (use-package helm-rg
      :defer t
      :straight t)
  #+end_src

  Helm with projectile
  #+begin_src elisp
    (use-package helm-projectile
      :after projectile
      :straight t
      :config
      (define-key evil-normal-state-map (kbd "S-C-P") 'helm-projectile-rg)
      )
  #+end_src

* Rustic for rust
  #+begin_src elisp
    (use-package rustic
      :straight t
      :defer t
      )
  #+end_src

* Company mode
  #+begin_src elisp
    (use-package company
      :straight t
      :defer t
      :hook (emacs-lisp-mode . company-mode)
      :config
      (global-company-mode)
      ) 
  #+end_src

* Yasnippet (snippet engine)
  #+begin_src elisp
    (use-package yasnippet
      :straight t
      :config
      (yas-global-mode)
      )

    (use-package yasnippet-snippets
      :straight t
      :defer t)
  #+end_src

* Treemacs
  #+begin_src elisp
    (use-package treemacs
      :defer t
      :straight t
      :config
      (setq treemacs-width 30)
      )

    (use-package treemacs-evil
      :after treemacs
      :straight t)

    (use-package treemacs-nerd-icons
      :straight t
      :config 
      (treemacs-load-theme "nerd-icons")
      )
  #+end_src

* Projectile
  #+begin_src emacs-lisp 
    (use-package projectile
      :straight t
      :defer t
      :config
      (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
      )
  #+end_src

  Setup projectile for treemacs

  #+begin_src emacs-lisp 
    (use-package treemacs-projectile
      :straight t
      :defer t)
  #+end_src

* Emacs startup profilier ESUP
  #+begin_src elisp
    (use-package esup
      :straight t
      :init
      (setq esup-depth 0))
  #+end_src

* Eyeborwse
  Multiple emacs "windows"

  #+begin_src emacs-lisp :tangle yes
    (use-package eyebrowse
      :straight t
      :config
      (eyebrowse-mode)
      (eyebrowse-setup-opinionated-keys)
      )
  #+end_src

* Magit
  #+begin_src emacs-lisp :tangle yes
    (use-package magit
      :straight t
      :defer t)
  #+end_src

* Olivetti mode
  Center the screen with org mode for a nicer writing experience
  #+begin_src emacs-lisp :tangle yes
    (use-package olivetti
      :straight t
      :defer t
      :hook
      (org-mode . (lambda () (olivetti-mode) (olivetti-set-width 120)))
      (dashboard-mode . (lambda () (olivetti-mode) (olivetti-set-width 150)))
      )
  #+end_src

* Emacs custom dashboard
  #+begin_src emacs-lisp :tangle yes
    (use-package dashboard
      :straight t
      :config
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
      (setq dashboard-startup-banner "~/.emacs.d/Icon_Emacs.webp")
      (setq dashboard-display-icons-p t)
      (setq dashboard-image-banner-max-width 200)
      (setq dashboard-icon-type 'nerd-icons)
      (setq dashboard-set-file-icons t)
      )
  #+end_src

* Bug hunter
  It's hard to debug emacs so this is pretty nice
  #+begin_src elisp
    (use-package bug-hunter
      :straight t
      :defer t)
  #+end_src

* Which key
  Display keybinds
  #+begin_src elisp
    (use-package which-key
      :straight t
      :config
      (which-key-mode))
  #+end_src

* Dired
  #+begin_src emacs-lisp :tangle yes
    (use-package dired
      :straight nil
      :defer t
      :after evil-collection
      :custom
      (dired-listing-switches "-lagho --group-directories-first")
      (setq dired-dwim-target t)
      )

    (defun go-home () (interactive)
           (find-alternate-file "~/"))

    (use-package dired-single
      :straight t
      :after dired
      :config (evil-collection-define-key 'normal 'dired-mode-map
                "h" 'dired-single-up-directory
                "l" 'dired-single-buffer
                "q" 'kill-buffer-and-window
                "gh" 'go-home))

    (use-package nerd-icons-dired
      :straight t
      :after dired
      :hook (dired-mode . nerd-icons-dired-mode)
      )

    (use-package dired-hide-dotfiles
      :straight t
      :after dired
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "H" 'dired-hide-dotfiles-mode))
  #+end_src

* Reset garbage collector default value 
  #+begin_src elisp
    (setq gc-cons-threshold 800000)
  #+end_src

