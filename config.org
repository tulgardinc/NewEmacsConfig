#+title: Emacs Config
#+PROPERTY: header-args :tangle config.el :results none

* Cleanup the UI and Emacs weirdness
make visuals make sense and sound

#+begin_src elisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq ring-bell-function 'ignore)

  ; background
  (set-frame-parameter nil 'alpha-background 75)
  (add-to-list 'default-frame-alist '(alpha-background . 75))
#+end_src

make backups go to the current directory

#+begin_src elisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/emacs_saves")))
  (setq backup-by-copying t)
#+end_src

* Setup Melpa
#+begin_src elisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+end_src

* Setup Straight
#+begin_src elisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq package-enable-at-startup nil)

#+end_src

* Get use-package
#+begin_src elisp
(straight-use-package 'use-package)
#+end_src

* Org mode
#+begin_src elisp
  (use-package org
    :straight t
    :defer t
    :hook (org-mode . org-indent-mode)
    :config
    (setq org-confirm-babel-evaluate nil)
  )

  (use-package org-superstar
    :straight t
    :hook (org-mode . org-superstar-mode)
    )
#+end_src

* Evil Mode
#+begin_src elisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
    :config
    (evil-mode)
    (define-key evil-normal-state-map (kbd "C-b") #'helm-mini)
    (define-key evil-normal-state-map (kbd "C-x C-f") 'helm-find-files)
    (define-key evil-normal-state-map (kbd "C-f") 'treemacs)
    (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
    (define-key evil-normal-state-map (kbd "S-C-p") 'helm-projectile-rg)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-set-undo-system 'undo-tree)
    )
#+end_src

and evil collection for many other modes

#+begin_src elisp
  (use-package evil-collection
    :straight t
    :after evil
    :custom (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init)
    )
#+end_src

* Undo tree
#+begin_src emacs-lisp :tangle yes
  (use-package undo-tree
    :straight t
    :config
    (global-undo-tree-mode)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo_tree_files")))
    )
#+end_src

* Doom Themes
#+begin_src elisp
  (use-package doom-themes
    :straight t
    :config
    (load-theme 'doom-moonlight t)
    ;(setq doom-themes-treemacs-theme "moonlight")
    ;(doom-themes-treemacs-config)
    (doom-themes-org-config)
    )
#+end_src

* Doom modeline
#+begin_src elisp
  (use-package doom-modeline
    :straight t
    :config
    (doom-modeline-mode)
    (display-time)
    (display-battery-mode)
    (setq doom-modeline-battery t)
    (setq doom-modeline-time t)
    )
#+end_src

* Set font
#+begin_src emacs-lisp :tangle yes
(set-face-attribute 'default nil :family "JetBrainsMonoNerdFont" :height 105)
;(set-face-attribute 'default nil :family "Ubuntu mono" :height 120)
#+end_src

* All the icons
#+begin_src elisp
  (use-package all-the-icons
    :straight t)
#+end_src

* Setup Solaire
Make unimportant buffers darker
#+begin_src elisp
  (use-package solaire-mode
    :straight t
    :config
    (solaire-global-mode t)
    (push '(treemacs-window-background-face . solaire-default-face) solaire-mode-remap-alist)
    (push '(treemacs-hl-line-face . solaire-hl-line-face) solaire-mode-remap-alist)
  )
#+end_src

* Lsp-mode
#+begin_src elisp
  (use-package lsp-mode
    :straight t
    :defer t
    :config
    (setq lsp-inlay-hint-enable t)
    (setq lsp-rust-analyzer-inlay-hints-mode t)
    (setq lsp-rust-analyzer-server-display-hints t)
    (setq lsp-rust-analyzer-display-chaining-hints t)
    (setq lsp-rust-analyzer-display-parameter-hints t)
    )
#+end_src

* Helm
#+begin_src elisp
  (use-package helm
    :straight t
    :config
    (helm-mode)
    (setq helm-split-window-in-side-p t)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "M-x") 'helm-M-x)
    (define-key helm-map (kbd "<tab>") #'helm-execute-persistent-action)
    (define-key helm-read-file-map (kbd "<C-backspace>") #'backward-kill-word)
    (define-key helm-map (kbd "<escape>") 'helm-keyboard-quit)
    )

  					; keep helm in place
  (use-package shackle
    :straight t
    :config
    (shackle-mode)
    (setq shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :ratio 0.4)))
    )
#+end_src

helm for LSP
#+begin_src elisp
  (use-package helm-lsp
    :defer t
    :straight t)
#+end_src

Ripgrep with helm
#+begin_src elisp
  (use-package helm-rg
    :defer t
    :straight t)
#+end_src

Helm with projectile
#+begin_src elisp
  (use-package helm-projectile
    :defer t
    :straight t)
#+end_src

* Ripgrep
#+begin_src elisp
  (use-package ripgrep
    :defer t
    :straight t)
#+end_src

* Rustic for rust
#+begin_src elisp
  (use-package rustic
    :straight t
    :defer t
    )
#+end_src

* Company mode
#+begin_src elisp
  (use-package company
    :straight t
    :defer t
    :after lsp-mode
    :config
    (global-company-mode)
    ) 
#+end_src

* Yasnippet (snippet engine)
#+begin_src elisp
  (use-package yasnippet
    :straight t
    :config
    (yas-global-mode)
    )
  
  (use-package yasnippet-snippets
    :straight t
    :defer t)
#+end_src

* Treemacs
#+begin_src elisp
  (use-package treemacs
    :defer t
    :straight t)

  (use-package treemacs-evil
    :after treemacs
    :straight t)

  (use-package treemacs-nerd-icons
    :straight t
    :config (treemacs-load-theme "nerd-icons")
    )
#+end_src

* Projectile
#+begin_src emacs-lisp 
  (use-package projectile
    :straight t
    :defer t)
#+end_src

Setup projectile for treemacs

#+begin_src emacs-lisp 
  (use-package treemacs-projectile
    :straight t
    :defer t)
#+end_src

* Hydra
#+begin_src elisp
  (use-package hydra
    :defer t
    :straight t)
#+end_src

* Emacs startup profilier ESUP
#+begin_src elisp
  (use-package esup
    :ensure t
    :init
  					; might need to move this before use-package
    (setq esup-depth 0)
    :straight t)
#+end_src

* Eyeborwse
Multiple emacs "windows"

#+begin_src emacs-lisp :tangle yes
  (use-package eyebrowse
    :straight t
    :config
    (eyebrowse-mode)
    (eyebrowse-setup-opinionated-keys)
    )
#+end_src

* Magit
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :straight t
    :defer t)
#+end_src

* Reset garbage collector value default
#+begin_src elisp
(setq gc-cons-threshold 800000)
#+end_src

* Launch whatever startup buffer
#+begin_src elisp
  (find-file "/home/ubuntu/.emacs.d/config.org")
#+end_src


